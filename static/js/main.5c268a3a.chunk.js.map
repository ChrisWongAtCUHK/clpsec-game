{"version":3,"sources":["graphql/apollo.js","components/Box.js","routes/Dashboard.js","routes/Client.js","App.js","serviceWorker.js","index.js"],"names":["scheme","proto","window","location","protocol","wsurl","httpurl","wsLink","WebSocketLink","uri","options","reconnect","httpLink","HttpLink","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","colors","orange","blue","Box","color","subscription","gql","variables","loading","error","data","className","style","backgroundColor","click_game_aggregate","aggregate","count","Dashboard","Container","Row","Component","Client","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yVAaMA,EAAS,SAACC,GACd,MAAoC,WAA7BC,OAAOC,SAASC,SAAhB,UAA2CH,EAA3C,KAAsDA,GAGzDI,EAAK,UAAML,EAAO,MAAb,cANmC,iCAMnC,eACLM,EAAO,UAAMN,EACjB,QADW,cAPiC,iCAOjC,eAIPO,EAAS,IAAIC,IAAc,CAC/BC,IAAKJ,EACLK,QAAS,CACPC,WAAW,KAITC,EAAW,IAAIC,IAAS,CAC5BJ,IAAKH,IAGDQ,EAAOC,aAEX,YAAgB,IAAbC,EAAY,EAAZA,MAAY,EACeC,YAAkBD,GAAtCE,EADK,EACLA,KAAMC,EADD,EACCA,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE3CZ,EACAK,GAQaQ,EALA,IAAIC,IAAa,CAC9BP,OACAQ,MAAO,IAAIC,M,uHCzCb,IASMC,EAAS,CACbC,OAAQ,UACRC,KAAM,WAyBOC,EAtBH,SAACC,GAAD,OACV,kBAAC,IAAD,CACEC,aAAcC,IAAF,IAhBc,yKAmB1BC,UAAWH,IAEV,YAA+B,IAA5BI,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,OAAIF,EAAgB,yCAChBC,EAAc,sCAEhB,yBACEE,UAAU,uBACVC,MAAO,CAAEC,gBAAiBb,EAAOI,EAAMA,SAEtCM,EAAKI,qBAAqBC,UAAUC,WCThCC,E,qNAbX,OACE,kBAAC,IAAD,CAAgBrB,OAAQA,GACtB,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKR,UAAU,uDACb,kBAAC,EAAD,CAAKP,MAAM,WACX,kBAAC,EAAD,CAAKA,MAAM,gB,GATCgB,aCGTC,E,qNAJX,OAAO,2C,GAJUD,aCGN,SAASE,IACtB,OACE,kBAAC,IAAD,KAGE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,SCHUC,QACW,cAA7B9C,OAAOC,SAAS8C,UAEe,UAA7B/C,OAAOC,SAAS8C,UAEhB/C,OAAOC,SAAS8C,SAASC,MACvB,2DCdNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACP,EAAD,OAEFQ,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC7B,GACN8B,QAAQ9B,MAAMA,EAAM+B,c","file":"static/js/main.5c268a3a.chunk.js","sourcesContent":["// Remove the apollo-boost import and change to this:\nimport ApolloClient from 'apollo-client';\n\n// Setup the network \"links\"\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { HttpLink } from 'apollo-link-http';\nimport { split } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\n\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nexport const HASURA_GRAPHQL_ENGINE_HOSTNAME = 'hge-realtime-app.herokuapp.com';\n\nconst scheme = (proto) => {\n  return window.location.protocol === 'https:' ? `${proto}s` : proto;\n};\n\nconst wsurl = `${scheme('ws')}://${HASURA_GRAPHQL_ENGINE_HOSTNAME}/v1/graphql`;\nconst httpurl = `${scheme(\n  'http',\n)}://${HASURA_GRAPHQL_ENGINE_HOSTNAME}/v1/graphql`;\n\nconst wsLink = new WebSocketLink({\n  uri: wsurl,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst httpLink = new HttpLink({\n  uri: httpurl,\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React from 'react';\nimport { Subscription } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst SUBSCRIPTION_CLICK_COUNT = `\nsubscription getClickCount($color: String) {\n  click_game_aggregate(where: {color: {_eq: $color}}) {\n    aggregate {\n      count(columns: color) \n    }\n  }\n}`;\n\nconst colors = {\n  orange: '#ff9559',\n  blue: '#007aff',\n};\n\nconst Box = (color) => (\n  <Subscription\n    subscription={gql`\n      ${SUBSCRIPTION_CLICK_COUNT}\n    `}\n    variables={color}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :</p>;\n      return (\n        <div\n          className=\"text-center w-25 p-3\"\n          style={{ backgroundColor: colors[color.color] }}\n        >\n          {data.click_game_aggregate.aggregate.count}\n        </div>\n      );\n    }}\n  </Subscription>\n);\n\nexport default Box;\n","import React, { Component } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport { ApolloProvider } from 'react-apollo';\nimport client from '../graphql/apollo';\n\nimport Box from '../components/Box';\n\nclass Dashboard extends Component {\n  componentWillMount() {}\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Container>\n          <Row className=\"vh-100 justify-content-md-center align-items-center\">\n            <Box color=\"orange\"></Box>\n            <Box color=\"blue\"></Box>\n          </Row>\n        </Container>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react';\n\nclass Client extends Component {\n  componentWillMount() {}\n\n  render() {\n    return <div>Client</div>;\n  }\n}\n\nexport default Client;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Dashboard from './routes/Dashboard';\nimport Client from './routes/Client';\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path=\"/dashboard\">\n          <Dashboard />\n        </Route>\n        <Route path=\"/client\">\n          <Client />\n        </Route>\n        <Route path=\"/\">\n          <Dashboard />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}