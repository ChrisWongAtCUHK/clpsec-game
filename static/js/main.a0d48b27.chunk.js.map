{"version":3,"sources":["graphql/apollo.js","components/ClickGameLineChart.js","components/Box.js","routes/Dashboard.js","components/CircleBtn.js","routes/Client.js","App.js","serviceWorker.js","index.js"],"names":["scheme","proto","window","location","protocol","wsurl","httpurl","wsLink","WebSocketLink","uri","options","reconnect","httpLink","HttpLink","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","parseLineChartData","index","duration","color","line_chart_data","parseFloat","name","black","renderLegend","props","className","ClickGameLineChart","data","click_game","orange","blue","first_clicked_at","length","click","moment","clicked_at","diff","as","i","getAllLineChartData","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","interval","type","domain","label","value","angle","position","content","stroke","activeDot","r","Box","count","SUBSCRIPTION_CLICK_GAME","gql","getClickCountsByColor","filter","c","Dashboard","mutate","mutation","subscription","loading","error","orange_clicks","blue_counts","Container","Row","MUTATION_INSERT_CLICK_GAME","CircleBtn","onCompleted","onError","insertClickGame","onClick","e","preventDefault","variables","Client","Component","App","basename","process","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a0d48b27.chunk.js","sourcesContent":["// Remove the apollo-boost import and change to this:\nimport ApolloClient from 'apollo-client';\n\n// Setup the network \"links\"\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { HttpLink } from 'apollo-link-http';\nimport { split } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\n\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nexport const HASURA_GRAPHQL_ENGINE_HOSTNAME = 'hge-realtime-app.herokuapp.com';\n\nconst scheme = (proto) => {\n  return window.location.protocol === 'https:' ? `${proto}s` : proto;\n};\n\nconst wsurl = `${scheme('ws')}://${HASURA_GRAPHQL_ENGINE_HOSTNAME}/v1/graphql`;\nconst httpurl = `${scheme(\n  'http',\n)}://${HASURA_GRAPHQL_ENGINE_HOSTNAME}/v1/graphql`;\n\nconst wsLink = new WebSocketLink({\n  uri: wsurl,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst httpLink = new HttpLink({\n  uri: httpurl,\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React from 'react';\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Line,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport moment from 'moment';\n\n// count click_game by color and elapsed time\nconst parseLineChartData = (index, duration, color, line_chart_data) => {\n  if (\n    // orange or blue\n    duration >= parseFloat(line_chart_data[index - 1].name) &&\n    duration < parseFloat(line_chart_data[index].name)\n  ) {\n    // black\n    line_chart_data[index][color]++;\n    if (color === 'orange') {\n      line_chart_data[index].black--;\n    }\n    if (color === 'blue') {\n      line_chart_data[index].black++;\n    }\n  }\n};\n\n// calculate all line chart data\nconst getAllLineChartData = (click_game) => {\n  // line chart data\n  const line_chart_data = [\n    {\n      name: '0',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '0.5',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '1',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '1.5',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '2',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '2.5',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '3',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '3.5',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '4',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '4.5',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n    {\n      name: '5',\n      orange: 0,\n      blue: 0,\n      black: 0,\n    },\n  ];\n\n  const first_clicked_at =\n    click_game.length > 0 ? click_game[0]['clicked_at'] : null;\n  for (let click of click_game) {\n    const duration = moment\n      .duration(moment(click.clicked_at).diff(moment(first_clicked_at)))\n      .as('seconds');\n\n    for (let i = 1; i < line_chart_data.length - 1; i++) {\n      parseLineChartData(i, duration, click.color, line_chart_data);\n    }\n  }\n\n  return line_chart_data;\n};\n\nconst renderLegend = (props) => {\n  return <div className=\"d-flex justify-content-center\">Second(s)</div>;\n};\n\n// function component\nfunction ClickGameLineChart({ click_game }) {\n  const data = getAllLineChartData(click_game);\n  return (\n    <LineChart\n      width={800}\n      height={400}\n      data={data}\n      margin={{\n        top: 5,\n        right: 0,\n        left: 200,\n        bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis\n        interval=\"preserveStartEnd\"\n        type=\"number\"\n        domain={['dataMin', 'dataMax']}\n        label={{ value: 'Click(s)', angle: -90, position: 'insideLeft' }}\n      />\n      <Tooltip />\n      <Legend content={renderLegend} />\n      <Line\n        type=\"monotone\"\n        dataKey=\"orange\"\n        stroke=\"#ff9559\"\n        activeDot={{ r: 8 }}\n      />\n      <Line type=\"monotone\" dataKey=\"blue\" stroke=\"#007aff\" />\n      <Line type=\"monotone\" dataKey=\"black\" stroke=\"#000000\" />\n    </LineChart>\n  );\n}\n\nexport default ClickGameLineChart;\n","import React from 'react';\nimport './colors.css';\nimport './Box.css';\n\nconst Box = ({ color, count }) => {\n  return <div className={`text-center w-25 p-3 box ${color}`}>{count}</div>;\n};\n\nexport default Box;\n","import React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport { ApolloProvider, Subscription } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport client from '../graphql/apollo';\nimport ClickGameLineChart from '../components/ClickGameLineChart';\nimport Box from '../components/Box';\n\n// realtime update data\n// filter by clickedt_at\nconst SUBSCRIPTION_CLICK_GAME = gql`\n  subscription getClickGame {\n    click_game_in_time_range {\n      color\n      clicked_at\n    }\n  }\n`;\n\n//  group by color\nconst getClickCountsByColor = (click_game, color) => {\n  return click_game.filter((c) => c.color === color);\n};\n\nconst Dashboard = () => {\n  // The game can be reset when the page is refreshed\n  client.mutate({\n    mutation: gql`\n      mutation deleteAllClicks {\n        delete_click_game(where: {}) {\n          affected_rows\n        }\n      }\n    `,\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <Subscription subscription={SUBSCRIPTION_CLICK_GAME}>\n        {({ loading, error, data }) => {\n          if (loading) return <p>Loading...</p>;\n          if (error) return <p>Error :</p>;\n          const click_game = data['click_game_in_time_range'];\n\n          // filter by color\n          // calculate the timespan from first clicked_at in second\n          const orange_clicks = getClickCountsByColor(click_game, 'orange');\n          const blue_counts = getClickCountsByColor(click_game, 'blue');\n\n          return (\n            <Container className=\"vh-100\">\n              <Row className=\"w-100\">\n                <ClickGameLineChart click_game={click_game} />\n              </Row>\n              <Row className=\"justify-content-md-center align-items-center\">\n                <Box color=\"orange\" count={orange_clicks.length} />\n                <Box color=\"blue\" count={blue_counts.length} />\n              </Row>\n            </Container>\n          );\n        }}\n      </Subscription>\n    </ApolloProvider>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport './CircleBtn.css';\n\nconst MUTATION_INSERT_CLICK_GAME = gql`\n  mutation insertClickGame($color: String) {\n    insert_click_game(objects: { color: $color }) {\n      affected_rows\n    }\n  }\n`;\n\nconst CircleBtn = ({ color }) => {\n  const onMutationCompleted = () => {};\n\n  const onMutationError = () => {};\n\n  return (\n    <Mutation\n      mutation={MUTATION_INSERT_CLICK_GAME}\n      onCompleted={onMutationCompleted}\n      onError={onMutationError}\n    >\n      {(insertClickGame) => (\n        <div className={`text-center p-3`}>\n          <button\n            className={`circle-btn ${color}`}\n            onClick={(e) => {\n              e.preventDefault();\n              insertClickGame({\n                variables: { color },\n              });\n            }}\n          >\n            {color === 'orange' ? '-' : '+'}\n          </button>\n        </div>\n      )}\n    </Mutation>\n  );\n};\n\nexport default CircleBtn;\n","import React, { Component } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport { ApolloProvider } from 'react-apollo';\nimport client from '../graphql/apollo';\n\nimport CircleBtn from '../components/CircleBtn';\n\nclass Client extends Component {\n  componentWillMount() {}\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Container>\n          <Row className=\"vh-100 justify-content-md-center align-items-center\">\n            <CircleBtn color=\"orange\"></CircleBtn>\n            <CircleBtn color=\"blue\"></CircleBtn>\n          </Row>\n        </Container>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default Client;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Dashboard from './routes/Dashboard';\nimport Client from './routes/Client';\n\nexport default function App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/client\" component={Client} />\n        <Route path=\"/\" component={Dashboard} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}